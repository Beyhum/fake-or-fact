package claim

import (
	"log"
	"github.com/mmcdole/gofeed"
)

// RssSource is a claim source based on RSS feeds. Its claims are always true
type RssSource struct {
	// determines if claims generated by this source are real or fake
	isRealSource bool
	// a function which takes a feed URL and returns a structured RSS feed or error
	parseFeed func(string) (*gofeed.Feed, error)
}

// NewRssSource creates an RSS based claim source
func NewRssSource(isRealSource bool) *RssSource {
	fn := gofeed.NewParser().ParseURL
	return &RssSource{isRealSource, fn}
}

// GetClaims returns claims that could be parsed for a given publisherURL
func (rssSource *RssSource) GetClaims(publisherURL string) []Claim {
	claims := make([]Claim, 0)
	feed, feedParseErr := rssSource.parseFeed(publisherURL)
	if feedParseErr != nil {
		log.Printf("Encountered error while collecting claims for publisher url %s: %s", publisherURL, feedParseErr.Error())
	} else {
		publisherName := feed.Title
		if len(feed.Categories) > 0 {
			publisherName = feed.Categories[0]
		}
		for _, article := range feed.Items {
			reviewedAt := article.PublishedParsed
			if reviewedAt == nil {
				reviewedAt = article.UpdatedParsed
			}
			if reviewedAt != nil {
				claimTitle := article.Title

				claim, creationErr := NewClaim(
					claimTitle,
					publisherName,
					article.Link,
					rssSource.isRealSource,
					*reviewedAt,
				)
				if creationErr == nil {
					claims = append(claims, claim)
				} else {
					log.Printf("RSS %v: %v", publisherURL, creationErr)
				}
			}

		}
	}
	return claims
}
